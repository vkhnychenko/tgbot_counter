from aiogram.dispatcher.filters.builtin import CommandStart
from loader import bot
from data.config import POINTS, ADMIN_ID, client
from operator import itemgetter
from aiogram import types
from loader import dp
import re

db = client.counter
collection = db.counter


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ "–ü—è—Ç—é–Ω—è\n'
                         f'–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥')


@dp.message_handler(commands='rating')
async def rating_handler(message: types.Message):
    user = await collection.find_one({'user_id': message.from_user.id})
    if user is None:
        await message.answer('–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ')
    else:
        cursor = collection.find({'group_id': user['group_id']})
        text = 'üèÜ–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤üèÜ\n\n'
        new_list = sorted(await cursor.to_list(length=100), key=itemgetter('points'), reverse=True)
        for document in new_list:
            text += f'@{document["username"]} ' + f'({document["points"]})\n'
        await message.answer(text)


@dp.message_handler(commands='bonus')
async def bonus_handler(message: types.Message):
    result = await collection.find_one({'user_id': message.from_user.id})
    if result is None:
        points = 0
    else:
        points = result['points']
    if points >= POINTS:
        await message.answer('–ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!–ö—É—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        await bot.send_message(ADMIN_ID, '–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –±–æ–Ω—É—Å–∞')
        await bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
        await collection.update_one({'user_id': message.from_user.id},
                                                         {'$set': {'points': points - POINTS}})
    else:
        await message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞. –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–±—Ä–∞—Ç—å {POINTS - points} –±–∞–ª–ª–æ–≤')


@dp.message_handler(commands='stats')
async def stats_handler(message: types.Message):
    result = await collection.find_one({'user_id': message.from_user.id})
    if result is not None:
        points = result['points']
    else:
        points = 0
    res = 0 if points > POINTS else POINTS - points
    await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ¬´–ü—è—Ç—é–Ω—è¬ª: {points}\n\n'
                         f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞–±—Ä–∞—Ç—å: {res} –±–∞–ª–ª–æ–≤')


@dp.message_handler()
async def all_message_handler(message: types.Message):
    if message.reply_to_message is not None:
        user_id = message.reply_to_message.from_user.id
        username = message.reply_to_message.from_user.username
        group_name = message.chat.title
        group_id = message.chat.id
        print(group_name)
        if (re.search(r'\+', message.text) or re.search(r'üëç', message.text)) and user_id != message.from_user.id:
            result = await collection.find_one({'user_id': user_id})
            if result is None:
                data = {
                    "user_id": user_id,
                    "username": username,
                    "group_id": group_id,
                    "group_name": group_name,
                    "points": 1
                }
                await collection.insert_one(data)
            else:
                await collection.update_one({'user_id': user_id},
                                                           {'$set': {'points': result['points'] + 50}})
            await message.answer(f'{message.from_user.username} –¥–∞–ª –ø—è—Ç—é–Ω—é {message.reply_to_message.from_user.username}')