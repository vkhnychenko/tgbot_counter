from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
import keyboards.default.reply_keyboards as reply_kb
from loader import dp, bot
from data.config import POINTS, ADMIN_ID, client
from operator import itemgetter


@dp.message_handler(lambda message: message.chat.type != 'group', CommandStart())
async def bot_start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!', reply_markup=reply_kb.start)


@dp.message_handler(commands='rating')
async def rating_handler(message: types.Message):
    cursor = client.db.test_collection.find()
    text = 'üèÜ–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤üèÜ\n'
    new_list = sorted(await cursor.to_list(length=100), key=itemgetter('points'), reverse=True)
    for document in new_list:
        print(document)
        text += f'@{document["username"]}' + f'({document["points"]})\n'
    await message.answer(text)


@dp.message_handler(lambda message: message.chat.type != 'group', text='üìå–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Åüìå')
async def bonus_handler(message: types.Message):
    result = await client.db.test_collection.find_one({'user_id': message.from_user.id})
    if result is None:
        points = 0
    else:
        points = result['points']
    print(points)
    if points >= POINTS:
        await message.answer('–ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!–ö—É—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        await bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
        await client.db.test_collection.update_one({'user_id': message.from_user.id},
                                                         {'$set': {'points': points - POINTS}})
    else:
        await message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞. –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–±—Ä–∞—Ç—å {POINTS - points} –±–∞–ª–ª–æ–≤')


@dp.message_handler(lambda message: message.chat.type != 'group', text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ¬´–ü—è—Ç—é–Ω—è¬ª')
async def bonus_handler(message: types.Message):
    result = await client.db.test_collection.find_one({'user_id': message.from_user.id})
    if result is not None:
        points = result['points']
    else:
        points = 0
    res = 0 if points > POINTS else POINTS - points
    await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ¬´–ü—è—Ç—é–Ω—è¬ª: {points}\n'
                         f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞–±—Ä–∞—Ç—å: {res} –±–∞–ª–ª–æ–≤')
